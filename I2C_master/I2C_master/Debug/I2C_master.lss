
I2C_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000170  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000170  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000730  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fc  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003aa  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  0000138c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000390  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000209  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000019d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  7a:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <I2C_init>:
	}
	else												// If transmission failed
	{
		return 3;
	}
}
  82:	81 b1       	in	r24, 0x01	; 1
  84:	83 60       	ori	r24, 0x03	; 3
  86:	81 b9       	out	0x01, r24	; 1
  88:	10 b8       	out	0x00, r1	; 0
  8a:	08 95       	ret

0000008c <I2C_start_condition_init>:
  8c:	96 b7       	in	r25, 0x36	; 54
  8e:	94 6a       	ori	r25, 0xA4	; 164
  90:	96 bf       	out	0x36, r25	; 54
  92:	06 b6       	in	r0, 0x36	; 54
  94:	07 fe       	sbrs	r0, 7
  96:	fd cf       	rjmp	.-6      	; 0x92 <I2C_start_condition_init+0x6>
  98:	91 b1       	in	r25, 0x01	; 1
  9a:	98 7f       	andi	r25, 0xF8	; 248
  9c:	98 30       	cpi	r25, 0x08	; 8
  9e:	79 f4       	brne	.+30     	; 0xbe <I2C_start_condition_init+0x32>
  a0:	83 b9       	out	0x03, r24	; 3
  a2:	86 b7       	in	r24, 0x36	; 54
  a4:	84 68       	ori	r24, 0x84	; 132
  a6:	86 bf       	out	0x36, r24	; 54
  a8:	06 b6       	in	r0, 0x36	; 54
  aa:	07 fe       	sbrs	r0, 7
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <I2C_start_condition_init+0x1c>
  ae:	81 b1       	in	r24, 0x01	; 1
  b0:	88 7f       	andi	r24, 0xF8	; 248
  b2:	88 31       	cpi	r24, 0x18	; 24
  b4:	31 f0       	breq	.+12     	; 0xc2 <I2C_start_condition_init+0x36>
  b6:	80 32       	cpi	r24, 0x20	; 32
  b8:	31 f4       	brne	.+12     	; 0xc6 <I2C_start_condition_init+0x3a>
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	08 95       	ret
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	08 95       	ret
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	08 95       	ret
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	08 95       	ret

000000ca <I2C_write>:
   Return: - Status of the event.                           */
/************************************************************************/
uint8_t I2C_write(char data)
{
	uint8_t status = 0;
	TWDR = data;										// Load the data to data register.
  ca:	83 b9       	out	0x03, r24	; 3
	TWCR |= (1 << TWEN)|(1 << TWINT);					// Enable I2C and clear interrupt flag
  cc:	86 b7       	in	r24, 0x36	; 54
  ce:	84 68       	ori	r24, 0x84	; 132
  d0:	86 bf       	out	0x36, r24	; 54
	
	while (!(TWCR & (1 << TWINT)));						// Wait till interrupt occurs. Indicates that address and write bit is transmitted
  d2:	06 b6       	in	r0, 0x36	; 54
  d4:	07 fe       	sbrs	r0, 7
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <I2C_write+0x8>
	status = (TWSR & 0xf8);								// Read the status.
  d8:	81 b1       	in	r24, 0x01	; 1
  da:	88 7f       	andi	r24, 0xF8	; 248
	
	if (status == 0x28)									// If data transmitted and ACK received.
  dc:	88 32       	cpi	r24, 0x28	; 40
  de:	21 f0       	breq	.+8      	; 0xe8 <I2C_write+0x1e>
	{
		return 0;
	} 
	else if (status == 0x30)							// If data transmitted and NACK received.
  e0:	80 33       	cpi	r24, 0x30	; 48
  e2:	21 f4       	brne	.+8      	; 0xec <I2C_write+0x22>
	{
		return 1;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	08 95       	ret
	while (!(TWCR & (1 << TWINT)));						// Wait till interrupt occurs. Indicates that address and write bit is transmitted
	status = (TWSR & 0xf8);								// Read the status.
	
	if (status == 0x28)									// If data transmitted and ACK received.
	{
		return 0;
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	08 95       	ret
	{
		return 1;
	} 
	else												// If transmission failed
	{
		return 3;
  ec:	83 e0       	ldi	r24, 0x03	; 3
	}
}
  ee:	08 95       	ret

000000f0 <main>:
uint8_t I2C_write(char data);
char I2C_read_ack(void);
char I2C_read_nack(void);

int main(void)
{
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	2a 97       	sbiw	r28, 0x0a	; 10
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	f8 94       	cli
 102:	de bf       	out	0x3e, r29	; 62
 104:	0f be       	out	0x3f, r0	; 63
 106:	cd bf       	out	0x3d, r28	; 61
	char arr[10] = "Test";
 108:	85 e0       	ldi	r24, 0x05	; 5
 10a:	e0 e6       	ldi	r30, 0x60	; 96
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	de 01       	movw	r26, r28
 110:	11 96       	adiw	r26, 0x01	; 1
 112:	01 90       	ld	r0, Z+
 114:	0d 92       	st	X+, r0
 116:	8a 95       	dec	r24
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x22>
 11a:	fe 01       	movw	r30, r28
 11c:	36 96       	adiw	r30, 0x06	; 6
 11e:	85 e0       	ldi	r24, 0x05	; 5
 120:	df 01       	movw	r26, r30
 122:	1d 92       	st	X+, r1
 124:	8a 95       	dec	r24
 126:	e9 f7       	brne	.-6      	; 0x122 <main+0x32>
	int i = 0;
	
	I2C_init();
 128:	0e 94 41 00 	call	0x82	; 0x82 <I2C_init>
	I2C_start_condition_init(EEPROM_WRITE_ADDRESS);
 12c:	80 e2       	ldi	r24, 0x20	; 32
 12e:	0e 94 46 00 	call	0x8c	; 0x8c <I2C_start_condition_init>
char I2C_read_nack(void);

int main(void)
{
	char arr[10] = "Test";
	int i = 0;
 132:	00 e0       	ldi	r16, 0x00	; 0
 134:	10 e0       	ldi	r17, 0x00	; 0
	
	I2C_init();
	I2C_start_condition_init(EEPROM_WRITE_ADDRESS);
	
    while (arr[i] != '\0') 
 136:	04 c0       	rjmp	.+8      	; 0x140 <main+0x50>
    {
		I2C_write(arr[i]);
 138:	0e 94 65 00 	call	0xca	; 0xca <I2C_write>
		i++;
 13c:	0f 5f       	subi	r16, 0xFF	; 255
 13e:	1f 4f       	sbci	r17, 0xFF	; 255
	int i = 0;
	
	I2C_init();
	I2C_start_condition_init(EEPROM_WRITE_ADDRESS);
	
    while (arr[i] != '\0') 
 140:	e1 e0       	ldi	r30, 0x01	; 1
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	ec 0f       	add	r30, r28
 146:	fd 1f       	adc	r31, r29
 148:	e0 0f       	add	r30, r16
 14a:	f1 1f       	adc	r31, r17
 14c:	80 81       	ld	r24, Z
 14e:	81 11       	cpse	r24, r1
 150:	f3 cf       	rjmp	.-26     	; 0x138 <main+0x48>
    {
		I2C_write(arr[i]);
		i++;
    }
}
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	2a 96       	adiw	r28, 0x0a	; 10
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	f8 94       	cli
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	0f be       	out	0x3f, r0	; 63
 160:	cd bf       	out	0x3d, r28	; 61
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	08 95       	ret

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
